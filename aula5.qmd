---
title: Encapsulamento e Visibilidade<br><br>
title-slide-attributes:
    data-background-size: contain
    data-background-position-x: center
    data-background-position-y: center
---

## Conteúdo desta Aula  

::::{.columns style='display: flex !important; height: 70%; align-items: center;'}

::: {.column width="30%"}
![](figuras/professor1-1.png){fig-alt="Professor1-1" fig-align="center"}
:::

::: {.column width="70%"}
::: {.nonincremental}
::: {style="font-size: 120%;"}
- Encapsulamento
- Interface
- Visibilidade de Atributos e Métodos
:::
:::
:::

::::

## Encapsulamento
:::{.fontsize90}
Como vimos anteriormente, os [métodos servem]{.alert}:
 
- Para **definir o estado** de um **objeto**.
- Como **mecanismo** de **comunicação** entre objetos.
:::

::::{.columns style='display: flex !important; align-items: center;' .fragment .fontsize90}

::: {.column width="60%"}
[Esconder]{.alert} o [estado interno do objeto]{.alert} e requerer que toda interação seja feita por meio dos métodos é chamado de [encapsulamento de dados]{.alert}.

- O **encapsulamento** é um **princípio fundamental** de OO.
:::

::: {.column width="40%"}
![](figuras/encapsulamento.png){fig-alt="Encapsulamento" fig-align="center" width=90%}
:::

::::


## Encapsulamento

::::{.columns style='display: flex !important; align-items: top;' .fontsize90}

::: {.column width="75%" .nonincremental}
- Na Orientação a Objetos, as [classes]{.alert} (e seus [objetos]{.alert}) [encapsulam]{.alert} seus [dados]{.alert}.
   - Ou seja, elas **não permitem** que os **dados** (atributos) sejam **diretamente acessados** de **fora da classe**.
   - Nesse caso, a única maneira de **acessar ou alterar** um dado é por **meio dos métodos** definidos na própria classe.
:::

::: {.column width="25%"}
![](figuras/cadeado.png){fig-alt="Atributo_protegido" fig-align="center" width=90%}
:::

::::

::::{.columns style='display: flex !important; align-items: top;' .fragment .fontsize90}

::: {.column width="30%"}
![](figuras/objeto_controle.png){fig-alt="Objeto_controle" fig-align="center" width=80%}

:::

::: {.column width="70%"}
Resumindo, o **objeto está no controle**, ou seja, é ele que determina **se** e **como** os **atributos** podem ser **alterados**.
:::

::::


## Interface

:::{.fontsize90}
- A [interface de comunicação]{.alert} de uma [classe]{.alert} é formada pelo seu [conjunto de métodos]{.alert} que podem ser [chamados de fora da classe]{.alert}.
   - Esses **métodos** formam a **interface** de um objeto com o **mundo externo**, ou seja, por meio deles conseguimos nos comunicar com um objeto.
 
- As **interfaces** permitem **informar** aos objetos **o que** fazer, mas **não como** fazer.
:::

[Fazendo uma analogia com uma máquina de cartão:]{.fragment style="color:darkblue;"}

::::{.columns style='display: flex !important; align-items: top;' .fragment .fontsize90}

::: {.column width="70%" .nonincremental}
- Os **botões** da máquina são a **interface** entre nós e os mecanismos internos do aparelho.
   - Ou seja, podemos usar uma máquina de cartão **pressionando** seus **botões** **sem saber** como é o seu **funcionamento interno**.
:::

::: {.column width="30%"}
![](figuras/maquina_cartao.png){fig-alt="Maquina_cartao" fig-align="center" width=90%}
:::

::::


## Interface e Encapsulamento

::::{.columns style='display: flex !important; align-items: top;' .fontsize90}

::: {.column width="60%" .nonincremental}
- O [encapsulamento]{.alert} garante que a única maneira de [acessar ou alterar dados]{.alert} de um objeto seja através da sua [interface de comunicação]{.alert}.
   - O **encapsulamento** garante o **ocultamento** de informações.
:::

::: {.column width="40%"}
![](figuras/interface.png){fig-alt="Interface" fig-align="center" width=100%}
:::
::::

::::{.columns style='display: flex !important; align-items: top;' .fragment .fontsize90}

::: {.column width="30%"}
![](figuras/interface1.png){fig-alt="Interface1" fig-align="center" width=80%}

:::

::: {.column width="70%" .nonincremental}
- O princípio da ocultação estabelece que devemos **expor** apenas a **interface de comunicação** entre os objetos.
:::
::::


## Interface

::::{.columns style='display: flex !important; align-items: top;'}
::: {.column width="70%" .fontsize90}
[Quais as vantagens de fazer com que a única forma de se comunicar com um objeto e acessar seus dados seja por meio dos métodos?]{style="color:darkgreen;"}
:::

::: {.column width="30%"}
![](figuras/pensando2.png){fig-alt="Pensando" fig-align="center" width=70%}
:::
::::

:::{.fontsize90}
- Mantendo a interface de comunicação (assinaturas dos métodos), você pode **alterar a representação interna** dos dados **sem afetar o restante do sistema**.
   - Exemplo: Inicialmente você usava vetor como um tipo de dado. Depois, por problemas de gerenciamento de memória, você troca o vetor por uma lista encadeada. Se a interface for mantida, isso não causará qualquer efeito colateral.
 
- Para **alguém** conseguir **usar um objeto** de uma **classe definida por você**, **basta** fornecer a **interface de comunicação**, ou seja, as assinaturas dos métodos.
:::




## Encapsulamento em Java
:::{.fontsize80}
[Uma vez que Java é uma linguagem de programação orientada a objetos, então o encapsulamento de dados está garantido? Ou seja, os atributos de uma classe em Java são inacessíveis fora dela?]{style="color:darkgreen;"}
:::

::::{.columns style='display: flex !important; align-items: top;' .fontsize90}

::: {.column width="32%"}
```{.java code-line-numbers="false"}
public class ContaBancaria{
    //Número da conta
    int numero;
    //Nome do titular da conta
    String nome;
    //Saldo da conta
    float saldo;

    // Outros métodos omitidos
}
```
:::

::: {.column width="72%"}
```{.java code-line-numbers="false"}
public class App{
    public static void main(String[] args){
        ContaBancaria minhaConta = new ContaBancaria();    
        // Acessando um atributo da classe ContaBancaria fora dela
        minhaConta.saldo = 100;
        //Imprimindo o valor do saldo
        System.out.println("Novo saldo: R$ %.2f\n",minhaConta.getSaldo());

    }
}
```
:::
::::

:::{.fontsize80}
- A princípio **não**!
   - No exemplo acima seria impresso na tela `Novo saldo: R$ 100,00`, mostrando que é possível acessar um atributo de fora da sua classe.

- Mas uma **classe** pode **definir o tipo de acesso** que seus **membros permitirão** às demais partes do sistema.
:::

## Encapsulamento em Java
:::{.fontsize80}
Para **encapsular** um **atributo** em uma classe Java, precisamos **explicitar** isso no **código**.
:::

::::{.columns style='display: flex !important; align-items: center;' .fontsize90}

::: {.column width="35%"}
```{.java code-line-numbers="false"}
public class ContaBancaria{
    //Número da conta
    int numero;
    //Nome do titular da conta
    String nome;
    //Saldo da conta
    float saldo;
    //Construtor e métodos omitidos
}
```
:::

::: {.column width="30%"}
![](figuras/seta.png){fig-alt="Seta" fig-align="center" width=50%}
:::

::: {.column width="35%"}
```{.java code-line-numbers="false"}
public class ContaBancaria{
    //Número da conta
    private int numero;
    //Nome do titular da conta
    private String nome;
    //Saldo da conta
    private float saldo;
    //Construtor e métodos omitidos
}
```
:::
::::

:::{.fontsize80}
- Os [modificadores]{.alert} de acesso `public` e `private` [controlam o acesso]{.alert} aos atributos da classe.
- A palavra-chave `private` é utilizada para **indicar** que os **atributos** são **privados** da classe. O que isso significa?
   - Significa que a **única** forma de saber o valor dos atributos ou alterá-los, de fora da classe, é **através dos métodos** da classe.
- **Não utilizar** o modificador de acesso `private` para os **atributos** de uma classe **fere** o **princípio do encapsulamento**.
:::


## Visibilidade de Atributos e Métodos

::::{.columns style='display: flex !important; align-items: top;'}
::: {.column width="85%" .fontsize90}
[Além do modificador de acesso denominado `private`, existe também o `public`. Qual será a finalidade desse segundo modificador?]{style="color:darkgreen;"}
:::

::: {.column width="20%"}
![](figuras/pensando2.png){fig-alt="Pensando" fig-align="center" width=100%}
:::
::::

:::{.fontsize80}
- Como é possível de imaginar, o `public` define que um **membro** é **acessível fora** da sua classe.
- Portanto, os **modificadores de acesso** definem a **visibilidade** de um **atributo** ou **método** de uma classe.
:::

::::{.columns style='display: flex !important; align-items: center;' .fragment}

::: {.column width="40%"}
```{.java code-line-numbers="false"}
public class ContaBancaria{
    private int numero;
    private String nome;
    private float saldo;
    //Retorna o número da conta
    public int getNumero(){
      return numero;
    }
    //Demais métodos omitidos
}
```
:::

::: {.column width="60%" .fontsize80 .nonincremental}
- Desse modo, se desejamos que um método possa ser **chamado de fora** da sua classe, temos que **inserir** no código o **modificador** `public`. 
:::
::::


## Métodos Privados
::::{.columns style='display: flex !important; align-items: center;'}

::: {.column width="25%"}
![](figuras/jovem.png){fig-alt="Pensando" fig-align="center" width=60%}
:::

::: {.column width="75%" .fontsize90}
[Mas faz algum sentido usar um método privado?]{style="color:darkgreen;"}

:::{.fontsize90}
- **Sim**, métodos privados são muito interessantes por **dois motivos**:
   - Em algumas situações percebemos que mais de um método público de nossa classe necessita de um mesmo trecho de código. A fim de **não repetir** esse **trecho de código** em **mais de um método público** da classe, separa-se esse trecho em um método privado que passa a ser chamado nos métodos públicos.
   - Um **método público** poderia ficar **muito grande**, o que dificultaria a legibilidade e manutenção do código. Nesse caso, pode-se dividir esse método em partes menores fazendo-se uso de métodos privados.
:::
:::

::::

 
## Métodos *get* e *set*
::::{.columns style='display: flex !important; align-items: top;'}
::: {.column width="70%" .fontsize90}
Já vimos que o modificador `private` faz com que a única forma de saber o valor de um atributo ou alterá-lo, de fora da classe, seja através dos métodos dessa classe.
:::

::: {.column width="30%"}
![](figuras/private.png){fig-alt="Private" fig-align="center" width=70%}
:::
::::

:::{.fontsize90}
- Portanto, uma **prática comum** para **acessar** os **atributos privados** é utilizar: 
   - Métodos *set*: são **métodos modificadores**, pois geralmente mudam o estado de um objeto.
   - Métodos *get*: são **métodos de acesso**, que permitem consultar os valores dos atributos.
- Comumente o **nome** desses **métodos** é dado pelo **prefixo** (*get* ou *set*) seguido pelo nome do atributo em questão (utilizando-se a notação **camelCase**).
:::


## Métodos *get* e *set* **versus** Atributos Públicos
::::{.columns style='display: flex !important; align-items: center;'}
::: {.column width="70%" .fontsize90}
[Fornecer os métodos *get* e *set* é o mesmo que tornar `public` os atributos da classe?]{style="color:darkgreen;"}
:::

::: {.column width="30%"}
![](figuras/pensando2.png){fig-alt="Pensando" fig-align="center" width=50%}
:::
::::

:::{.fontsize80 .fragment}
Pode parecer que sim, mas **há** uma **diferença** sutil.
   
- Se o atributo for declarado `private`, o método *get* (`public`) **permitirá o acesso** ao **atributo** a partir de outras classes, **mas** ele **poderá controlar** como esse dado será acessado.
   - Por exemplo, o método *get* pode controlar o formato dos dados que ele retorna.
- De modo semelhante, o método *set* (`public`) pode, e deve, **examinar** cuidadosamente as **tentativas de modificar** o valor de um **atributo**.
   - Por exemplo, tentativas de definir a idade de uma pessoa com valor negativo devem ser rejeitadas.
- Resumindo, apesar de os métodos *get* e *set* fornecerem acesso a atributos `private`, esse **acesso é controlado** pela implementação dos métodos!
:::


## Métodos *get* e *set*
::::{.columns style='display: flex !important; align-items: center;'}

::: {.column width="25%"}
![](figuras/jovem.png){fig-alt="Pensando" fig-align="center" width=60%}
:::

::: {.column width="75%" .fontsize90}
[Devo criar métodos *get* e *set* para todos atributos (`private`) da classe?]{style="color:darkgreen;"}

:::{.fontsize90}
- Analise o nosso **exemplo da aula anterior**, onde temos a classe `ContaBancaria`:
   - Os **atributos** dessa classe são: o `nome` do titular, o `número` da conta e o `saldo` da mesma.
   - Além disso, ela possui **métodos** que permitem o cliente movimentar a sua conta (`sacar` e `depositar`).
   - Faz sentido um método *set* para alterar o atributo `saldo`?
   - Na vida real, como o saldo de uma conta é alterado?
- Portanto, devemos criar métodos *set* e *get* **somente** quando for **realmente necessário**!
:::
:::

::::


## Uma Falha Comum em Orientação a Objetos

::::{.columns style='display: flex !important; align-items: top;'}
::: {.column width="50%"}
```{.java code-line-numbers="false"}
public class Carro{
    private String cor;
    private float tamanho;
    private Motor motor;
    //Retorna o motor do carro
    public Motor getMotor(){
      return motor;
    }
    //Demais métodos omitidos
}
```
:::

::: {.column width="50%"}
```{.java code-line-numbers="false"}
public class Motor{
    private int numeroValvulas;
    private float potencia;
    private String tipo;
    //Altera a potência do motor
    public void mudarPotencia(float potencia){
      this.potencia = potencia;
    }
    //Demais métodos omitidos
}
```
:::
::::

:::{.fontsize80 .fragment}
[O que acontece se fora da classe `Carro` eu declarar uma variável que recebe o retorno do método `getMotor` e chamar o método `mudarPotencia` usando essa variável? Isso vai alterar a potência do motor do carro?]{style="color:darkgreen;"}
:::

::::{.columns style='display: flex !important; align-items: top;' .fragment}
::: {.column width="40%" }
```{.java code-line-numbers="false"}
pubic class Qualquer{
   public void metodoQualquer(){
      Carro c = new Carro();
      Motor m = c.getMotor();
      m.mudarPotencia(1.3f);
   }
}
```
:::

::: {.column width="60%" .fontsize80 .nonincremental}
- Sim, vai alterar a potência do motor do carro. Isso acontece porque o **método** `getMotor` **retorna** uma **referência** (endereço) do motor do carro.
:::
::::


## Uma Falha Comum em Orientação a Objetos
:::{.fontsize90}
[Mas qual é o problema disso?]{style="color:darkgreen;"}

- Nós aprendemos com o conceito de **encapsulamento** que a **classe** deve ser a **única** capaz de **alterar** os seus **dados**. 
- Dessa forma, se um **carro** possui um **motor**, os dados desse motor **não** deveriam ser **alterados fora** da classe `Carro`.

[Como evitar isso?]{style="color:darkgreen;" .fragment}

- Nesses casos deve ser retornada uma **cópia do objeto** motor e **não** a **referência** para o **objeto** em si.
- A linguagem Java padroniza um nome de **método** (`clone`) para retornar uma cópia para o objeto.
- Mas se você precisasse implementar um método desse sem conhecer o método `clone`, como você faria com o que já conhece da linguagem?
:::


##

![](figuras/perguntas.png){fig-alt="Perguntas" fig-align="center" width=35%}