---
title: Aula Prática 6<br><br>
title-slide-attributes:
    data-background-size: contain
    data-background-position-x: center
    data-background-position-y: center
---

## Observações Importantes {}
::: {.fontsize80}
::: {.nonincremental}

A realização dos exercícios nas **aulas práticas é primordial** para que você consiga **consolidar os conceitos** aprendidos nas **aulas teóricas** (aulas não presenciais - ANP) e **colocá-los em prática** utilizando a linguagem de programação Java.

- No entanto, para **conseguir realizar os exercícios** das aulas práticas é **fundamental** que você tenha **estudado**, [antes das aulas práticas]{.underline}, o **conteúdo** das aulas não presenciais disponibilizadas pelo professor. 

Vale ressaltar que, **para ter presença** nas **aulas práticas**, além de **comparecer às aulas**, o aluno deve **realizar e entregar os exercícios** propostos nas aulas.

- Portanto, **não esqueça de entregar no Campus Virtual** os exercícios **até o término das aulas práticas** (mesmo que não tenha terminado-os completamente).
:::
:::


## Contextualização

:::{.fontsize90}
Na aula de hoje **utilizaremos** a IDE **Visual Studio Code** ou **qualquer outra** de sua preferência (**exceto BlueJ**).
:::

. . .

:::{.fontsize90}
Assim como na aula prática anterior, **hoje** vocês farão a **implementação** **sem** que nenhum **código inicial** seja fornecido.
:::

. . .

:::{.fontsize90}
Portanto, **antes de começarem a codificar**, **leiam** o **enunciado** do exercício **com atenção** e entendam a **modelagem** do problema, ou seja, **quais** **classes** deverão implementar e **quais** serão os **atributos** e **métodos** de cada uma delas.
:::

. . .

:::{.fontsize90}
O exercício desta aula está dividido em **duas etapas**, as quais devem ser **implementadas em sequência**, uma vez que a etapa 2 é um incremento ao que foi implementado na etapa 1.  
:::



## Atividade - Etapa 1
:::{.nonincremental .fontsize70}

Este exercício se refere a um programa para ajudar alunos da escola primária no aprendizado da multiplicação. Nesta primeira etapa, crie uma **classe** `Questao` que atenda às necessidades listadas a seguir. Lembre-se de **definir** adequadamente a **visibilidade** (`public`/`private`) dos atributos e métodos.

- As questões devem possuir um **enunciado** e um **gabarito**, ou seja, a sua resposta correta.
- O **construtor** dessa classe deve **gerar o enunciado** do exercício, o qual sempre tem o formato “Quanto é *num1* * *num2*?”, sendo os dados que compõem esse enunciado (*num1* e *num2*) devem ser **gerados aleatoriamente** (entre 0 e 9) utilizando-se o método `nextInt` da classe `Random` do Java (pacote java.util).
- Antes da declaração da classe `Questao`, não se esqueça da declaração import (`import java.util.Random;`) para fazer uso da classe `Random`.
- Deve existir um **método** para ser possível **consultar o enunciado**.
- Deve existir um **método** que receba por **parâmetro** a **resposta do aluno** e **retorne** um **booleano** indicando se o aluno acertou a questão ou não.
:::

:::{.callout-important title="Random" icon=false .nonincremental .fontsize80}
- Criando um objeto Random: Random numeroAleatorio = new Random( ); 
- Obtendo um valor aleatório int no intervalo [0, y]: int valor =  numeroAleatorio.nextInt(y+1);
:::


## Atividade - Etapa 1 (continuação)
:::{.nonincremental .fontsize70}

Crie uma segunda **classe** denominada `Prova`, que atenda aos seguintes requisitos:

- Cada **prova** deve conter uma **única questão**.
- Deve existir um **método** denominado `aplicar` que, quando chamado, **apresente** uma **questão** para o usuário e **obtenha** a **resposta** do mesmo e, a partir dessa resposta, **verifique** a sua **corretude** e **imprima** na tela uma das **mensagens** a seguir:
    - Muito bem, você acertou!
    - Infelizmente você errou!
      
Para **testar** o seu **programa**, **crie** uma terceira **classe** denominada `App` que contenha o **método** `main`. No método `main`, apenas **instancie** um **objeto** da classe `Prova` e chame o **método** `aplicar`.

**Teste sua implementação!**
:::


## Atividade - Etapa 2
:::{.nonincremental .fontsize70}

**Altere** o **método** `aplicar` da **classe** `Prova` de modo a permitir que o usuário tenha **mais uma** chance de **responder** corretamente a questão se a primeira resposta dele estiver incorreta. Nesse caso, deve ser adicionada a seguinte mensagem para o usuário: "Você ganhou mais uma chance! Digite outra resposta para a questão:". Além disso,  após verificar a corretude da(s) resposta(s), **imprima** na **tela** uma das **mensagens** a seguir (onde x corresponde ao número de vezes que o usuário respondeu aquela questão):
    
- Você tentou x vez(es) e acertou a questão. 
- Você tentou 2 vezes e errou a questão. 

**Teste suas alterações!**
:::


## 
:::{.callout-warning title="Atenção" icon=false .fontsize90}
Execute a sua implementação e verifique se ela está funcionando corretamente. **Entregue** no Campus Virtual a **versão final da implementação** obtida após a conclusão da [Etapa 2]{style="color:darkblue;"}.
:::