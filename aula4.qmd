---
title: Objetos na Memória e Sobrecarga<br><br>
title-slide-attributes:
    data-background-size: contain
    data-background-position-x: center
    data-background-position-y: center
---

## Conteúdo desta Aula  

::::{.columns style='display: flex !important; height: 70%; align-items: center;'}

::: {.column width="30%"}
![](figuras/professor1-1.png){fig-alt="Professor1-1" fig-align="center"}
:::

::: {.column width="70%"}
::: {.nonincremental}
::: {style="font-size: 120%;"}
- Criação de Objetos
- Construtores
- Sobrecarga
- Identidade de Objetos
:::
:::
:::

::::


# Criação de Objetos {background-color="#fb8c0e"}

## Criação de Objetos
:::{.fontsize90}
- Para criar um objeto devemos usar a palavra-chave **new**.
- Vamos supor que temos uma classe `ContaBancaria` e desejamos criar um objeto a partir dessa classe. Como fazer?
:::

:::{.fragment}
```{.java code-line-numbers="false"}
ContaBancaria minhaConta;
minhaConta = new ContaBancaria();
```
:::

:::{.fontsize90}
- O que estamos fazendo na **primeira linha**? **Criando um objeto**?
    - **Não**!
    - E também não estamos **declarando** um objeto, mas sim **uma variável** que poderá **referenciar** um objeto.
- E na **segunda linha**, estamos **criando um objeto**?
    - **Sim**, pois quando utilizamos o comando **new** o objeto é criado.
    - A atribuição (sinal =) faz com que a **variável** `minhaConta` **referencie o objeto** criado.
:::

## Criação de Objetos na Memória

![](figuras/investigar_objeto_memoria.png){fig-alt="Objeto_memoria" fig-align="center" width=70%}


## Criação de Objetos na Memória

::::{.columns style='display: flex !important; height: 70%; align-items: top;'}

::: {.column width="35%"}
```{.java code-line-numbers="false"}
public class ContaBancaria{
    //Número da conta
    private int numero;
    //Nome do titular da conta
    private String nome;
    //Saldo da conta
    private float saldo;

    public int getNumero(){
        return numero;
    }
    public String getNome(){
        return nome;
    }
    // Outros métodos omitidos
}
```
:::

::: {.column width="55%"}
```{.java code-line-numbers="false"}
public class App{
    public static void main(String[] args){
        ContaBancaria minhaConta;    
        minhaConta = new ContaBancaria();
    }
}
```
::: {.r-stack}
![](figuras/modelo_memoria1.png){fig-alt="Modelo_memoria1" fig-align="center"  .fragment .fade-in-then-out}

![](figuras/modelo_memoria2.png){fig-alt="Modelo_memoria2" fig-align="center" .fragment .fade-in-then-out}

![](figuras/modelo_memoria3.png){fig-alt="Modelo_memoria3" fig-align="center"  .fragment .fade-in-then-out}

![](figuras/modelo_memoria4.png){fig-alt="Modelo_memoria4" fig-align="center"  .fragment .fade-in-then-out}
:::

:::
::::


## Variáveis e Objetos

[No exemplo anterior existe uma [variável]{.alert} que guarda um [endereço]{.alert}.]{.fontsize90}

. . .

:::{.fontsize90}
Então essa variável **não seria um ponteiro**?

- Certamente! Tecnicamente as [variáveis de objetos]{.alert} em Java [são ponteiros]{.alert}.
:::

. . .

:::{.fontsize90}
Mas já ouvimos dizer que pelo fato de **Java não ter ponteiros**, ela é **mais segura** que C++. E agora?

- Apesar de a variável ser um ponteiro, **Java não permite** que você faça as **operações de ponteiro** com a variável.
- Isso ajuda a **eliminar** os **principais riscos** de uso de ponteiros.
:::


# Construtores {background-color="#fb8c0e"}

## Construtor

[Quando o [comando]{.alert} **new** é utilizado, além de se [criar o objeto]{.alert}, o [construtor]{.alert} do objeto é [chamado]{.alert}.]{.fontsize90}

. . .

:::{.fontsize90}
Mas o que acontece se **criarmos** uma **classe sem um construtor**? Será possível **criar objetos** dessa classe?

- **Sim**, é possível criar objetos dessa classe.
- Isso porque **Java cria** (internamente) um **construtor padrão** (sem parâmetros).
- O **construtor padrão inicializa os atributos** dos objetos:
    - Com **valores padrões** para **tipos primitivos** (int, float $\ldots$).
    - Com ***null*** para **tipos por referência** (variáveis de objetos).
:::


## Construtor

::::{.columns style='display: flex !important; height: 60%; align-items: top;'}

::: {.column width="46%" .nonincremental .fontsize75}
Se utilizássemos o construtor padrão da classe `ContaBancaria`, um objeto dessa classe teria seus atributos incializados com valores padrão do Java:

- `numero` = 0
- `nome` = *null*
- `saldo` = 0.0f
:::

::: {.column width="54%"}
::: {.nonincremental}
```{.java code-line-numbers="false"}
public class ContaBancaria{
    private int numero;//Número da conta
    private String nome;//Nome do titular da conta
    private float saldo;//Saldo da conta 
    
    //Classe sem construtor
    
    public int getNumero(){
        return numero;
    }
    public String getNome(){
        return nome;
    }
    // Outros métodos omitidos
}
```
:::
:::

::::

::: {.fontsize75 .fragment}
Mas uma **conta bancária sem um titular** é uma conta **válida**?

- Certamente **não**! Sem um número, um titular e um saldo não temos uma conta válida.
:::

::: {.fontsize75 .fragment}
Portanto, o **construtor** precisa **garantir** que o **estado inicial** dos objetos da classe seja **válido**.
:::


## Construtor Padrão

::::{.columns style='display: flex !important; align-items: center;'}

::: {.column width="30%"}
![](figuras/jovem.png){fig-alt="Pensando" fig-align="center" width=50%}
:::

::: {.column width="70%" .fontsize90}
Se a classe tiver **apenas** um construtor com parâmetros, **posso usar** o **construtor padrão** do Java?

- **Não**, **exceto** se você **tiver implementado** um **construtor igual ao construtor padrão** do Java.

::: {.fragment .fontsize90}
[**Por que?**]{style="color:darkblue;"}

- Porque se Java permitisse isso, **seria impossível** que o programador garantisse que os objetos tenham sempre um **estado inicial válido**.
:::
:::

::::


## Classe `ContaBancaria` Completa

```{.java code-line-numbers="false"}
public class ContaBancaria{
    private int numero;//Número da conta
    private String nome;//Nome do titular da conta
    private float saldo;//Saldo da conta
    //Construtor
    public ContaBancaria(int numero, String nome){
        this.numero = numero;
        this.nome = nome;
        saldo = 0.0f;
    }

    public int getNumero(){
        return numero;
    }

    public String getNome(){
        return nome;
    }

    public float getSaldo(){
        return saldo;
    }
    
    public void depositar(float valor){
        saldo += valor;
    }

    public void sacar(float valor){
        saldo -= valor;
    }
}
```


# Sobrecarga {background-color="#fb8c0e"}

## Sobrecarga de Métodos

::::{.columns style='display: flex !important; align-items: top;' .fontsize90}

::: {.column width="30%"}
![](figuras/jovem.png){fig-alt="Pensando" fig-align="center" width=35%}
:::

::: {.column width="70%" .fontsize90}
**Métodos** com o **mesmo nome** podem ser **declarados** na **mesma classe**?

- Sim, desde que tenham [diferentes conjuntos de parâmetros]{.alert}.
- Os conjuntos de parâmetros são determinados pelo [número]{.alert}, [tipos]{.alert} e [ordem]{.alert} dos parâmetros.
:::

::::

::::{.columns style='display: flex !important; align-items: center;' .fragment .fontsize90}

::: {.column width="70%" .fontsize90}
Isso é o que chamamos de **sobrecarga de métodos**!

- Quando um método sobregarregado é chamado, o compilador Java seleciona o método adequado examinando o [número]{.alert}, os [tipos]{.alert} e a [ordem]{.alert} dos argumentos na chamada.
:::

::: {.column width="30%"}
![](figuras/professor2_metade.png){fig-alt="Pensando" fig-align="center" width=40%}
:::
::::


## Sobrecarga de Métodos

::::{.columns style='display: flex !important; align-items: top;'}

::: {.column width="30%"}
![](figuras/jovem.png){fig-alt="Pensando" fig-align="center" width=35%}
:::

::: {.column width="70%" .fontsize90}
**Para que serve a sobrecarga de métodos?**

- Ela é comumente utilizada para criar vários métodos com o **mesmo nome** que realizam as **mesmas tarefas** (ou tarefas **semelhantes**), mas sobre **conjuntos de parâmetros diferentes**.
:::

::::

:::{.callout-important title="Observação" icon=false .fragment}
Vale ressaltar que além dos métodos, os **construtores** também podem ser **sobrecarregados**.
:::


## Sobrecarga de Métodos

[Posso criar dois métodos sobrecarregados com a mesma quantidade de parâmetros, dos mesmos tipos, mas com **nomes diferentes**?]{.fontsize80}

::::{.columns style='display: flex !important; align-items: center;' .nonincremental}

::: {.column width="15%"}
**Exemplo:**
:::

::: {.column width="85%"} 
```{.java code-line-numbers="false"}
public void depositar(float aluguel);
public void depositar(float salario);
```
:::

::::

- [O que **pode ou não** ser feito em **termos de sobrecarga** tem a ver com o que o **compilador consegue identificar**]{.fontsize80}.

::::{.columns style='display: flex !important; align-items: center;' .fragment}

::: {.column width="50%" .nonincremental}
- [No exemplo anterior, imagine a chamada:]{.fontsize80}
:::

::: {.column width="50%"}
```{.java code-line-numbers="false"}
minhaConta.depositar(2000.00);
```
:::

::::

:::{.fontsize80}
- Como o compilador definiria qual dos métodos está sendo chamado?
- O compilador **não consegue**! Portanto, **não podemos** criar métodos sobrecarregados desse modo.
:::


## Sobrecarga de Métodos

[E agora? Posso criar dois métodos sobrecarregados como os declarados a seguir?]{.fontsize90}

::::{.columns style='display: flex !important; align-items: center;' .nonincremental}

::: {.column width="15%"}
**Exemplo:**
:::

::: {.column width="85%"} 
```{.java code-line-numbers="false"}
public void metodoX(int a, float b);
public void metodoX(float a, int b);
```
:::
::::
 
- [Sim, pois a ordem dos tipos dos parâmetros é distinta!]{.fontsize90}


## Sobrecarga de Métodos

[Eu posso criar dois métodos sobrecarregados com os mesmos parâmetros, mas com **tipos de retorno** diferentes?
]{.fontsize80}

::::{.columns style='display: flex !important; align-items: center;' .nonincremental}

::: {.column width="15%"}
**Exemplo:**
:::

::: {.column width="85%"} 
```{.java code-line-numbers="false"}
public int resgatar(String aplicacao);
public float resgatar(String aplicacao);
```
:::
::::

::::{.columns style='display: flex !important; align-items: center;' .fragment}

::: {.column width="55%" .fontsize80 .nonincremental}
- Novamente, vamos pensar em uma chamada.
:::

::: {.column width="45%"} 
```{.java code-line-numbers="false"}
int a = minhaConta.resgatar("poupanca");
```
:::
::::

:::{.fontsize80}
- Humm... nesse caso parece que sim, pois o compilador sabe que a variável `a` é do tipo **int**.
- Mas e se eu não usar o valor retornado por uma chamada de método?
    - [Por exemplo, eu poderia chamar o método da seguinte forma:]{.fontsize90} [minhaConta.`resgatar`(["poupanca"]{style="color:darkblue;"});]{.fontsize75}
    - Nesse caso, o compilador **não consegue definir** qual **método** deverá ser **chamado**.
- Portanto, também **não** é possível declarar **métodos sobrecarregados** desse modo.
:::


# Identidade de Objetos {background-color="#fb8c0e"}

## Identidade dos Objetos

Considere o seguinte trecho de código:
```{.java code-line-numbers="false"}
ContaBancaria minhaConta = new ContaBancaria();
ContaBancaria outraConta = new ContaBancaria();
```

:::{.fontsize90}
- Quantos objetos existem? Qual é a **identidade** de cada **objeto**?
    - Nós tendemos a pensar que a variável representa a identidade do objeto.
:::

:::{.fragment .fontsize90}
Considere agora esse outro trecho de código:
```{.java code-line-numbers="false"}
ContaBancaria minhaConta = new ContaBancaria();
ContaBancaria outraConta = minhaConta;
```
:::

:::{.fontsize90}
- Quantos objetos existem? Qual é a **identidade** de cada **objeto**?
    - Esses exemplos mostram que a [variável não pode ser a identidade do objeto]{.alert}. Veja que nesse último caso temos **duas variáveis** e apenas **um objeto**.
:::

## Identidade dos Objetos

[Voltando ao trecho de código:]{.fontsize90}
```{.java code-line-numbers="false"}
ContaBancaria minhaConta = new ContaBancaria();
ContaBancaria outraConta = new ContaBancaria();
```
:::{.fontsize90}
- Os dois **objetos** são **criados** usando o **mesmo construtor**, portanto:
    - Eles têm os mesmos valores de atributos.
    - Possuem os mesmos métodos.

- Então o que define que **eles são diferentes**?
    - Já vimos que uma **variável de objeto** armazena o **endereço** do objeto na *Heap*. 
    - Portanto, a [identidade do objeto]{.alert} é dada pelo seu [endereço de memória]{.alert}!
:::

## Comparando Objetos ou Variáveis?

[Voltando ao nosso exemplo anterior:]{.fontsize90}
```{.java code-line-numbers="false"}
ContaBancaria minhaConta = new ContaBancaria();
ContaBancaria outraConta = new ContaBancaria();
boolean saoIguais = (minhaConta == outraConta);
```

:::{.fontsize90}
Qual seria o valor da variável `saoIguais`? Por que?

- O operador == está comparando variáveis (e não objetos)!
- Nesse caso, está se **comparando** se as variáveis **referenciam o mesmo objeto** (mesmo endereço de memória).
- Desse modo, ainda que os objetos sejam **iguais** (tenham o **mesmo estado**), a variável `saoIguais` recebe o valor *false* pelo fato de as **variáveis referenciarem objetos distintos**.
:::

## Comparando Objetos ou Variáveis?

[Seguindo o mesmo raciocínio, analise o trecho de código a seguir:]{.fontsize90}
```{.java code-line-numbers="false"}
ContaBancaria minhaConta = new ContaBancaria();
ContaBancaria outraConta = minhaConta;
boolean saoIguais = (minhaConta == outraConta);
```

:::{.fontsize90}
Qual seria o valor da variável \textit{saoIguais}? Por que?

- Nesse caso o resultado é *true*, uma vez que as duas **variáveis referenciam o mesmo objeto**.
:::


## Comparando Objetos ou Variáveis?
:::{.fontsize90}
Como fazer então para **comparar** se dois **objetos são iguais**?
 
- Poderíamos [criar um método]{.alert} em uma classe para [verificar se dois objetos são iguais]{.alert}.
- Como seria esse método?
    - Poderíamos criar em uma classe um **método** denominado `saoIguais` que **receba** por **parâmetro** um **objeto da mesma classe**.
    - O corpo desse método implementa a **comparação entre os atributos** do objeto em questão com aqueles do objeto passado por parâmetro.
  
- Como esse tipo de comparação é frequentemente necessário, a [linguagem Java disponibiliza um método]{.alert} que implementa isso.
:::


##

![](figuras/perguntas.png){fig-alt="Perguntas" fig-align="center" width=35%}