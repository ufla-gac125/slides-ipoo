---
title: Atributos e Métodos Estáticos e Destrutores<br><br>
title-slide-attributes:
    data-background-size: contain
    data-background-position-x: center
    data-background-position-y: center
---

## Conteúdo desta Aula  

::::{.columns style='display: flex !important; height: 70%; align-items: center;'}

::: {.column width="30%"}
![](figuras/professor1-1.png){fig-alt="Professor1-1" fig-align="center"}
:::

::: {.column width="70%"}
::: {.nonincremental}
::: {style="font-size: 120%;"}
- Atributos Estáticos
- Métodos Estáticos
- Destrutores
:::
:::
:::

::::

## Atributos Estáticos

::::{.columns style='display: flex !important; align-items: top;' .fontsize90}

::: {.column width="70%"}
Suponha que você está desenvolvendo um **sistema** para uma **agência** de uma instituição **bancária**.

- A **estratégia** de venda dos produtos (consórcio, seguros, planos de previdência etc.) nessa agência **depende** do **número de contas abertas** na mesma.
:::

::: {.column width="30%"}
![](figuras/sistema_banco.png){fig-alt="Sistema_banco" fig-align="center" width=100%}
:::

::::

:::{.fontsize90}
- Você definiu a classe `ContaBancaria` para tratar os comportamentos de **cada** uma das **contas** abertas.
- Precisamos então **armazenar** em algum local a **quantidade** de **contas abertas**.
- [Qual a melhor forma de guardar isso?]{style="color:darkblue;"}
   - Na **própria** classe? 
   - Em **outra** classe? 
   - Como?
:::


## Atributos Estáticos

::::{.columns style='display: flex !important; align-items: top;' }
::: {.column width="50%" .fontsize80}
Se colocarmos essa informação em uma **classe** que **não seja** a `ContaBancaria`, teríamos que **lembrar** de **incrementar** a variável `totalContas` toda vez que um novo objeto da classe `ContaBancaria` fosse criado.
:::
::: {.column width="63%"}
```{.java code-line-numbers="false"}
public class App{
   public static void main(String[] args){
      int totalContas = 0;

      ContaBancaria c1 = new ContaBancaria(1234,"Luiz");
      totalContas = totalContas + 1;

      ContaBancaria c2 = new ContaBancaria(5678,"Marco");
      totalContas = totalContas + 1;
   }
}
```
:::
::::

::::{.columns style='display: flex !important; align-items: top;' .fragment}
::: {.column width="40%"}
```{.java code-line-numbers="false"}
public class ContaBancaria{
   private int totalContas;
   // Outros atributos omitidos
   public ContaBancaria(){
      //Mais algum código
      totalContas++;
   }
   //Demais métodos omitidos
}
```
:::
::: {.column width="60%" .fontsize80  }
- Então basta que a própria classe `ContaBancaria` **controle** essa informação **no** seu **construtor**!
   - Desse modo, **fica garantido** que toda vez que um **objeto** for **criado**, ele será **contabilizado**.
- [Essa solução funcionará?]{style="color:darkblue;"}
:::
::::


## Atributos Estáticos
::::{.columns style='display: flex !important; align-items: center;'}

::: {.column width="50%" .fontsize80 .nonincremental}
O que acontece se criarmos **dois objetos** da classe `ContaBancaria` apresentada anteriormente?

- [Qual seria o valor do atributo totalContas?]{style="color:darkblue;"}
:::

::: {.column width="50%"}
```{.java code-line-numbers="false"}
ContaBancaria conta1 = new ContaBancaria();
ContaBancaria conta2 = new ContaBancaria();
```
:::
::::

::::{.columns style='display: flex !important; align-items: top;' .fragment}

::: {.column width="50%" }
![](figuras/modelo_memoria.png){fig-alt="Modelo_memoria" fig-align="center" width=100%}
:::

::: {.column width="50%" .fontsize80}
- Como sabemos, **cada objeto** tem seus **valores** para **seus atributos**, ou seja, o atributo é de cada objeto!
- Isso ocorre porque, na memória, **cada objeto** tem **seu espaço** para **guardar** os **valores** de seus **atributos**.
- Portanto, a cada novo objeto da classe `ContaBancaria`, um novo espaço de memória é reservado para armazenar o valor de `totalContas`.
:::
::::  


## Atributos Estáticos
::::{.columns style='display: flex !important; align-items: top;'}

::: {.column width="70%" .fontsize90}
E se conseguíssemos **reservar** um **espaço de memória** que fosse **compartilhado** por **todos** os **objetos** de uma mesma classe?
:::

::: {.column width="30%"}
![](figuras/pensando2.png){fig-alt="Pessoa_duvida" fig-align="center" width=70%}
:::
::::

:::{.fragment .fontsize90}
[Podemos fazer isso usando um **atributo estático**!]{style="color: darkblue;"}
 
- Um [atributo estático]{.alert} pertence [à classe]{.alert} e não aos objetos.
- Quando um **atributo** é declarado como **estático**, um **espaço de memória** (heap) é **reservado** para ele **uma única vez** e pode ser **acessado** por **todos** os **objetos** daquela classe.
- Desse modo, se um objeto alterar o valor de um atributo estático, todos os demais poderão acessar esse novo valor.
:::

## Atributos Estáticos
::::{.columns style='display: flex !important; align-items: top;'}

::: {.column width="50%"}
```{.java code-line-numbers="true"}
public class ContaBancaria{
   private static int totalContas;
   // Outros atributos omitidos
   public ContaBancaria(){
      //Mais algum código
      totalContas++;
   }
   //Demais métodos omitidos
}
```
:::

::: {.column width="45%" .fontsize80}
Veja a inclusão do [atributo estático]{.alert} na **linha 2** do código!

- A declaração de um atributo estático é realizada utilizando-se o modificador `static`.
:::
::::

::::{.columns style='display: flex !important; align-items: top;' .fragment}

::: {.column width="55%"}
```{.java code-line-numbers="false"}
public class App{
   public static void main(String[] args){
      ContaBancaria conta1 = new ContaBancaria();
      ContaBancaria conta2 = new ContaBancaria();
   }
}
```
:::{.fontsize80 }
Agora temos apenas **uma cópia** do atributo `totalContas` na **memória** e, portanto, o incremento dentro do construtor afeta essa cópia.
:::
:::

::: {.column width="50%"}
::: {.r-stack}
![](figuras/modelo_atributo_estatico1.png){fig-alt="Modelo_memoria1" fig-align="center"  .fragment .fade-in-then-out}

![](figuras/modelo_atributo_estatico2.png){fig-alt="Modelo_memoria2" fig-align="center" .fragment .fade-in-then-out}

![](figuras/modelo_atributo_estatico3.png){fig-alt="Modelo_memoria3" fig-align="center"  .fragment .fade-in-then-out}
:::
:::
::::



## Atributos Estáticos
::::{.columns style='display: flex !important; align-items: top;'}
::: {.column width="70%" .fontsize80}
Os [atributos estáticos]{.alert} são denominados [variáveis de classe]{.alert}, o que os diferencia das **variáveis de instância** (que correspondem às implementações dos **atributos** dos **objetos**).
:::

::: {.column width="30%"}
![](figuras/professor2_metade.png){fig-alt="Professor_metade" fig-align="center" width=30%}
:::
::::

:::{.fontsize80 .fragment}
Um exemplo que já usamos é `out`, um atributo **estático público** da classe `System`. 

![](figuras/system_out.png){fig-alt="System_out" fig-align="center" width=40%}
:::
 
:::{.fontsize80 .fragment}
Todos os **atributos** **estáticos** e **públicos** (`public static`) de uma classe podem ser **acessados** por meio de uma **referência** a qualquer **objeto** da classe ou **qualificando** o **nome** do **atributo** com o nome da classe e um ponto (.), ou seja, *Classe.atributo*.
:::

## Constantes e Atributos Estáticos
:::{.fontsize80}
Em linguagens de programação OO **não** existe o conceito de **variável global** (acessível de qualquer parte do código).

:::{.fragment}
[Então como definir, por exemplo, constantes "globais" nessas linguagens?]{style="color: darkblue;"}
 
- Em Java, já **existem** algumas **constantes** **definidas** em uma **classe** contida em sua biblioteca de classes. Por exemplo, a constante **PI** é um atributo da classe `Math`.
- Como acessar o valor de pi? Se ele é um atributo de uma classe, basta criar um objeto dessa classe para acessá-lo, correto?
- Hummm...mas não seria um **desperdício** de recursos e desempenho ter que **criar** um **objeto** da classe `Math` só para consultar seus valores?
- De fato, **não precisamos criar** um **objeto** para isso uma vez que **PI** é um **atributo estático**, **público** e **constante**.
   - Assim como aprendemos, podemos acessar o valor de pi usando: `Math.PI`.
:::
:::

## Constantes em Java
::::{.columns style='display: flex !important; align-items: top;'}

::: {.column width="25%"}
![](figuras/jovem.png){fig-alt="Pensando" fig-align="center" width=35%}
:::

::: {.column width="75%"}
[Mas e se eu quiser criar uma constante em uma classe de um programa em Java?]{style="color: darkblue;" .fontsize80}

:::{.fragment .nonincremental}
- [Para declarar uma [constante em Java]{.alert} você deve usar o [modificador final]{.alert}.]{.fontsize80}

```{.java code-line-numbers="false"}
private final int INCREMENTO; 
```
:::
:::
::::

:::{.fontsize80}
- **Atributos constantes** podem ser **inicializados** quando são **declarados** ou nos **construtores**.
- Qual a diferença entre essas duas opções de inicialização?
   - Inicializar constantes em **construtores** permite que **cada objeto** da classe tenha um **valor diferente** para a constante.
   - Aliás, se a inicialização for na **declaração**, recomenda-se **declará-lo** como um **atributo estático**, evitando-se criar uma cópia separada do atributo para cada objeto da classe.
:::

## Objetos Constantes

:::{.callout-warning title="Cuidado!" icon=false}
Usar atributos constantes de tipos primitivos (`int`, `float` etc.) é tranquilo. Mas usar **atributos constantes** do **tipo objeto** exige cautela, pois **objetos constantes** **não** são **imutáveis**!
:::
 
:::{.fragment .nonincremental}
[Considere a declaração do seguinte atributo constante:]{style="color:darkblue;" .fontsize90}
```{.java code-line-numbers="false"}
private final ContaBancaria minhaConta = new ContaBancaria(); 
```

:::

:::{.fontsize90}
- Qual o significado dessa declaração?
   - Significa apenas que **não** posso **atribuir** um **novo objeto** à variável `minhaConta` (o endereço armazenado é constante).
   - No entanto, **nada impede** que eu chame os métodos desse objeto e, desse modo, **altere seu estado**.
:::


## Métodos Estáticos
[Em Java, temos um método para calcular o logaritmo natural de um número. Veja como ele é chamado:]{style="color:darkblue;" .fontsize90}
```{.java code-line-numbers="false"}
double valor = Math.log(num);
```
- [Repare que o método `log` está sendo **chamado** sem que **nenhum** **objeto** da classe `Math` tenha sido **instanciado**.]{.fontsize90}

:::{.fragment .nonincremental .fontsize90}
- Ele está sendo **chamado** utilizando-se a **sintaxe**: *Classe.método*. 
- Com o que isso parece?
:::

:::{.fontsize90}
- Portanto, assim como os atributos, os [métodos]{.alert} de uma classe também [podem ser estáticos]{.alert}.
   - Nesse caso, eles são chamados de [métodos de classe]{.alert}.
:::


## Métodos Estáticos
::::{.columns style='display: flex !important; align-items: center;'}

::: {.column width="35%"}
![](figuras/jovem.png){fig-alt="Pensando" fig-align="center" width=40%}
:::

::: {.column width="65%" .fontsize90}
[Qual a utilidade de métodos estáticos?]{style="color: darkblue;" }

- Eles são interessantes para realizar **operações** que **não dependem** do **estado dos objetos**.
- Por isso, eles podem ser **executados** **sem** a necessidade de se **instanciar** um **objeto** da classe.
:::
::::




## Exemplo de Método Estático
:::{.fontsize80}
- Suponha que temos uma classe `ContaBancaria`.
:::

:::{.fragment .nonincremental}
:::{.fontsize80}
- Essa classe possui o seguinte **método** que **converte** de **R\$** para **US\$**:
:::
```{.java code-line-numbers="false"}
public static double converte(double valorReal, double taxa); 
```
:::

:::{.fontsize80}
- Você concorda que eu poderia **desejar utilizar** esse **método** mesmo **sem** ter uma **conta bancária**?
   - Às vezes precisamos apenas realizar essa conversão e não de uma conta bancária propriamente dita.
- O que **aconteceria se** esse **método** não fosse **estático**?
   - O usuário seria **obrigado** a **criar um objeto** `ContaBancaria` só para fazer essa conversão.
   - Mas **não faz sentido** criar uma conta bancária "falsa" apenas para poder **chamar** um **método** como esse.
:::

:::{.fragment .fontsize70}
Obs.: Em uma boa modelagem esse método provavelmente ficaria em uma classe utilitária (e não em ContaBancaria). No entanto, aqui vale como um exemplo didático.
:::


## Restrições para Métodos Estáticos
::::{.columns style='display: flex !important; align-items: top;'}

::: {.column width="50%"}
```{.java code-line-numbers="false"}
public class ContaBancaria{
   private double saldo;
   private static double limiteConta;
   //Demais atributos omitidos
   
   public static double saldoDisponivel(){
      return saldo + limiteConta;
   }
   //Demais métodos omitidos
}
```
:::

::: {.column width="50%" .fontsize90}
[Existe algum problema com esse método estático?]{style="color:darkblue;"}

![](figuras/pensando2.png){fig-alt="Pensando" fig-align="center" width=45%}
:::
::::


:::{.fontsize90}
- Como o método é **estático**, ou seja, é um método de classe, ele pode ser **chamado sem existir** nenhum **objeto** daquela classe.
- Portanto, se ele for chamado diretamente -- *ContaBancaria.saldoDisponivel( )*, qual seria o valor do atributo `saldo`? 
- Ou se existissem **vários objetos** conta bancária, o **saldo** a ser usado seria de **qual conta**?
:::

## Restrições para Métodos Estáticos
::::{.columns style='display: flex !important; align-items: center;'}

::: {.column width="60%"}
```{.java code-line-numbers="false"}
public class ContaBancaria{
   private double saldo;
   private static double limiteConta;
   //Demais atributos omitidos
   
   public static double saldoDisponivel(double taxa){
      return getSaldo() * taxa;
   }
   public double getSaldo(){
      return saldo + limiteConta;
   }
   //Demais métodos omitidos
}
```
:::

::: {.column width="45%" .fontsize80}
[Este programa funciona? Por que?]{style="color:darkblue;"}

::: {.r-stack}
![](figuras/pensando2.png){fig-alt="Pensando" fig-align="center" width=45% .fragment .fade-in-then-out}

![](figuras/msg_erro_terminal.png){fig-alt="Modelo_memoria1" fig-align="center" .fragment .fade-in}
:::
- [A mensagem de erro mostra que um **método não estático** **não** pode ser **chamado** a partir de um **método estático**. Mas por qual **motivo**?]{.fontsize80}
:::
::::

:::{.fontsize80}
- A questão é que um **método não estático** pode **acessar** um **atributo** também **não estático**.
- Desse modo, se um **método estático** pudesse **chamar** um **não estático**, poderíamos **acessar** (indiretamente) **atributos não estáticos** (o que sabemos não ser possível).
:::


## Restrições para Métodos Estáticos

:::{ .nonincremental}
![](figuras/limitacao_metodo_estatico.png){fig-alt="Limitacao_meto_estatico" fig-align="center" width=60%}

[1. Exceto se o acesso tiver sendo feito por uma instância da classe criada previamente.]{.fontsize70}
:::


## O Método `main`
[Agora que já sabemos o que é um **método estático**, vamos recordar uma **declaração** que **já utilizamos** diversas vezes.]{.fontsize80}

```{.java code-line-numbers="false"}
public static void main(String[] args) 
```

:::{.fragment .fontsize80}
[Por que o método main precisa ser estático?]{style="color:darkblue;"}
 
- Para responder essa pergunta vamos lembrar **como executamos programas** usando a JVM: *java MinhaClasse*
- A partir desse comando, o que a JVM faz é realizar a seguinte chamada: *MinhaClasse.main($\ldots$)*[$^1$]{style="color:#00838f;"}
- Perceba que essa **chamada** só **é possível** porque o método `main` é **estático**!
:::

:::{.fontsize70}
1. Ao executar um programa você pode passar dados para execução do mesmo.
:::


## *Garbage Collector*
::::{.columns style='display: flex !important; align-items: top;'}
::: {.column width="30%"}
![](figuras/jovem.png){fig-alt="Pensando" fig-align="center" width=30%}
:::

::: {.column width="80%" .fontsize80}
[Em um programa Java, o que acontece na memória com uma variável local (tipo primitivo) quando um método termina?]{style="color:darkblue;"}

- A **variável** é sempre **desalocada** quando o método **termina**.
- Como no caso de tipos primitivos a variável armazena seu próprio valor, **desalocar** uma variável, **significa** **desalocar** o **seu** **valor**.
:::
::::


::::{.columns style='display: flex !important; align-items: top;' .fontsize80 .fragment}
::: {.column width="70%"}
[Mas o  que acontece se essa variável local estiver referenciando um objeto?]{style="color:darkblue;"}
 
- No caso de variáveis que **referenciam** **objetos**, **desalocar** a variável **significa** que o local que armazena o **endereço** do objeto foi **desalocado**.
- Mas e a **memória alocada** para o **objeto** (*heap*) em si, o que acontece?
:::
::: {.column width="40%"}
![](figuras/pensando2.png){fig-alt="Pensando" fig-align="center" width=60%}
:::
::::


## *Garbage Collector*
![](figuras/coletor_lixo1.png){fig-alt="Coletor_lixo1" fig-align="center" width=57%}

:::{.fontsize80 .fragment}
[Sempre que um objeto já não é mais acessível, ou seja, quando perdemos a referência para esse objeto:]{style="color:darkblue;"} 
 
- Ele **fica disponível** para o [coletor de lixo]{.alert} (*garbage collector*).
- Mas atenção, o *Garbage Collector* age **apenas** sobre **objetos**, nunca sobre variáveis.
- Portanto, você **não precisa** se preocupar em **desalocar** a **memória** utilizada por um **objeto**, pois Java cuida disso para você.
   - O *Garbage Collector* é controlado pela JVM e, por isso, não tem como saber quando exatamente um objeto será desalocado.
:::


## Vazamento de Memória
::::{.columns style='display: flex !important; align-items: top;'}
::: {.column width="30%"}
![](figuras/vazamento_memoria.png){fig-alt="Vazamento_memoria" fig-align="center" width=57%}

:::

::: {.column width="70%" .fontsize80}
O [vazamento de memória]{.alert} ocorre quando **deixamos** em nosso programa **objetos** que **não** estão mais sendo **usados** **alocados na memória**, fazendo com que o coletor de lixo não consiga reconhecê-los como objetos elegíveis para desalocação.
:::
::::

::::{.columns style='display: flex !important; align-items: top;' .fragment}
::: {.column width="70%" .fontsize80}
Como resultado, estes **objetos nunca** são **desalocados**, **permanecem** na memória **indefinidamente**, reduzindo assim a quantidade total de memória disponível. Num sistema que precise funcionar continuamente (nunca é desligado), isso levará a um travamento do sistema ou do computador.
:::

::: {.column width="30%"}
![](figuras/consumo_memoria.png){fig-alt="Consumo_memoria" fig-align="center" width=70%}
:::
:::: 

   
## Vazamento de Memória
::::{.columns style='display: flex !important; align-items: top;' .fontsize90}
::: {.column width="80%"}
[Uma vez que o Java possui o *Garbage Collector*, precisamos nos preocupar com vazamento de memória?]{style="color:darkblue;"}
:::
::: {.column width="30%"}
![](figuras/pensando2.png){fig-alt="Pensando" fig-align="center" width=60%}
:::
::::

:::{.fontsize90} 
- O *Gabage Collector* ajuda a **evitar vazamento** de memória, uma vez que ele **desaloca memória** ocupada por **objetos** que **não** estão mais sendo **referenciados**.
- No entanto, ele **não elimina** inteiramente os **vazamentos de memória**! Por que?
   - Ele **não** efetuará **coleta de lixo** de um **objeto** até que **não haja** nenhuma **referência** a ele.
   - Portanto, se você **mantiver** erroneamente **referências** a objetos indesejáveis, **vazamentos** de memória podem **ocorrer**.
:::

## Destrutores
::::{.columns style='display: flex !important; align-items: center;'}
::: {.column width="40%"}
![](figuras/pessoa_assustada.png){fig-alt="Pessoa_assustada" fig-align="center" width=70%}
:::
::: {.column width="70%"}
[Java não possui destrutor!]{style="color:darkblue;"}

- [Com o *garbage collector*, **vazamentos de memória** que são comuns em outras linguagens (tais como em C e C++, já que a memória não é automaticamente desalocada), são **menos prováveis** em **Java**.]{.fontsize80}
:::
::::

:::{.fontsize80 .fragment}
No entanto, além de vazamento de memória, **vazamentos** de **outros recursos** podem ocorrer.

- Por exemplo, um aplicativo pode abrir um **arquivo** no disco para modificar seu conteúdo.
- Se o **aplicativo** não **fechar** o **arquivo** depois que ele não é mais necessário, pode acontecer de ele **não** estar **disponível** para uso em **outros programas**.
- Portanto, é importante que **liberemos** os **recursos**, como um **arquivo** ou uma **conexão** com um **banco de dados**, depois que eles não forem mais necessários.
:::


##

![](figuras/perguntas.png){fig-alt="Perguntas" fig-align="center" width=35%}
