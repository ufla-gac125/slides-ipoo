---
title: Relacionamento entre Objetos<br><br>
title-slide-attributes:
    data-background-size: contain
    data-background-position-x: center
    data-background-position-y: center
---

## Conteúdo desta Aula  

::::{.columns style='display: flex !important; height: 70%; align-items: center;'}
::: {.column width="30%"}
![](figuras/professor1-1.png){fig-alt="Professor1-1" fig-align="center"}
:::

::: {.column width="70%"}
::: {.nonincremental}
::: {style="font-size: 120%;"}
Tipos de Relacionamento entre Objetos:

- Composição
- Agregação
- Associação
:::
:::
:::
::::

## Relacionamento entre Objetos
::::{.columns style='display: flex !important; align-items: center;'}
::: {.column width="60%" .fontsize90}
Na programação orientada a objetos, os **objetos se relacionam**, ou seja, **enviam mensagens** uns para os outros.

- Esse envio de [mensagens]{.alert} se dá quando um objeto faz [chamadas a métodos públicos de outros objetos]{.alert}.
:::
::: {.column width="40%"}
![](figuras/envio_mensagem.png){fig-alt="Envio_mensagem" fig-align="center" width=90%}
:::
::::

::::{.columns style='display: flex !important; align-items: top;'.fragment}
::: {.column width="30%"}
![](figuras/aluno_estudando.png){fig-alt="Aluno_estudando" fig-align="center" width=70%}
:::
::: {.column width="70%" .fontsize90}
Sistemas OO dependem de como os objetos se relacionam. Portanto, o planejamento (**modelagem**) das classes **se baseia nesses relacionamentos**.
:::
::::


## Pensando nos Relacionamentos...
::::{.columns style='display: flex !important; align-items: center;'}
::: {.column width="40%"}
![](figuras/software_pizzaria.png){fig-alt="Software_pizzaria" fig-align="center" width=90%}
:::
::: {.column width="70%" .nonincremental}
[Quais objetos podem existir em um software de uma pizzaria?]{style="color:darkblue;"}

:::{.fontsize90}
- Como você acha que esses objetos se relacionam? 
- O que cada um tem a ver com o outro? 
- Quem envia mensagem para quem?
:::
:::
::::

. . .

[Podemos pensar que existem, por exemplo, os objetos:]{style="color:darkblue;"}

:::{.fontsize90}
- Pizza, Bebida, Vendedor, Cliente etc.
- Um pedido pode ser formado por um conjunto de itens (**pizza** e **bebida**) e estar vinculado a um **cliente** e um **vendedor**.
:::


## Pensando nos Relacionamentos...
::::{.columns style='display: flex !important; align-items: top;'}
::: {.column width="40%"}
![](figuras/sig_ufla.png){fig-alt="Sig_ufla" fig-align="center" width=80%}
:::
::: {.column width="70%" .nonincremental}
[Quais objetos podem existir em um software como o SIG-UFLA?]{style="color:darkblue;"}

:::{.fontsize90}
Pense novamente como os objetos se relacionam. 

- O que cada um tem a ver com o outro?
:::
:::
::::

. . .

[Podemos pensar que existem, por exemplo, os objetos:]{style="color:darkblue;"}

:::{.fontsize90}
- Aluno, Turma, Professor, Disciplina etc.
- Uma **turma** pode ser formada por um conjunto de **alunos** e estar vinculada a uma **disciplina**.
:::


## Pensando nos Relacionamentos...
::::{.columns style='display: flex !important; align-items: top;'}
::: {.column width="40%"}
![](figuras/interior_banco.png){fig-alt="Interior_banco" fig-align="center" width=100%}
:::
::: {.column width="70%" .nonincremental}
[Por fim, quais objetos podem existir em um software de um banco?]{style="color:darkblue;"}

:::{.fontsize90}
E nesse caso, como os objetos se relacionam? 

- O que cada um tem a ver com o outro?

:::
:::
::::

. . .

[Podemos pensar que existem, por exemplo, os objetos:]{style="color:darkblue;"}

:::{.fontsize90}
- Agência, Cliente, Funcionário, Contas etc.
- Um **banco** pode ter diversas **agências**.
- Um **cliente** pode ter várias **contas** (corrente, poupança...) e estar vinculado a uma **agência**.
:::


## Relacionamento entre Objetos
::::{.columns style='display: flex !important; align-items: top;'}
::: {.column width="65%" .fontsize90}
Com os exemplos anteriores, podemos perceber que os softwares **orientados a objetos dependem** em grande parte de **como os objetos se relacionam**.

:::{.fragment}
Portanto, temos que entender agora os [tipos de relacionamento]{.alert} que podem existir [entre objetos]{.alert}:
    
- Composição.
- Agregação.
- Associação.
:::
:::
::: {.column width="40%"}
![](figuras/relacionamento_objetos.png){fig-alt="Relacionamento_objetos" fig-align="center" width=90%}
:::
::::
    

## Relacionamento: Banco x Agências
![](figuras/banco_agencias.png){fig-alt="Banca_agencias" fig-align="center" width=100%}


## Relacionamento: Pedido x Itens
![](figuras/pedido_itens.png){fig-alt="Pedido_itens" fig-align="center" width=100%}


## Relacionamento: Livro x Capítulos
![](figuras/livro_capitulos.png){fig-alt="Livro_capitulos" fig-align="center" width=100%}


## Composição
![](figuras/exemplo_composicao.png){fig-alt="Exemplo_composicao" fig-align="center" width=90%}

[O que esses três exemplos têm em comum?]{style="color:darkblue;"}

:::{.fontsize90} 
- O fato de que um [objeto]{.underline} **tem** (um ou mais) [objeto(s)]{.underline} de outra classe.

[Esse tipo de relacionamento é denominado [composição]{.alert}.]{.fragment}
:::


## Composição
::::{.columns style='display: flex !important; align-items: top;'}
::: {.column width="30%"}
![](figuras/corpo_humano.png){fig-alt="Corpo_humano" fig-align="center" width=90%}
:::
::: {.column width="70%" .fontsize90}
[A composição se caracteriza por ser um relacionamento **todo/parte**.]{style="color:darkblue;"}

- Ou seja, há uma **classe** representando o **todo** e **classes** "satélites" funcionando como **partes**.
:::
::::

[Além disso, há outra característica importante:]{style="color:darkblue;" .fragment .fontsize90}

:::{.fontsize90}
- Nos exemplos vistos:
  - Se eu não tenho um banco, não preciso das agências.
  - Se não há um pedido, não faz sentido pensar em itens de pedido.
  - Se eu destruir um livro, não faz sentido os capítulos existirem. 
  
- **Resumindo:** o objeto contido **não faz sentido** sem o objeto que o contém.
- Ou seja, o [todo controla o tempo de vida das partes]{.alert}.
:::


## Composição - Exemplo de Código
::::{.columns style='display: flex !important; align-items: center;'}
::: {.column width="30%"}
![](figuras/professor1-1.png){fig-alt="Professor1-1" fig-align="center" width=60%}

:::
::: {.column width="70%".nonincremental .fontsize90}
[Suponha que precisamos implementar em Java um sistema que tenha as classes Carro, Motor e Porta.]{style="color:darkblue;"}
 
- Podemos dizer que um **carro** [tem]{.underline} um **motor**.
- Um **carro** [tem]{.underline} 4 **portas**.

[Como isso pode ser implementado?]{style="color:darkblue;"}
:::
::::



## Composição - Exemplo de Código
:::{.fontsize95}
```{.java code-line-numbers="false"}
public class Carro{
  private Motor motor;//<1>
  private Porta[] portas;
  public Carro(){
    motor = new Motor();//<2>
    portas = new Porta[4];
    for(int i = 0; i < 4; i++){
      portas[i] = new Porta();
    }
  }
  public Motor getMotor(){//<3>
    return motor.clone();
  }
  public Porta[] getPortas(){//<4>
    return portas.clone();
  }
}
```

1. [Como o motor e as portas são partes do carro, eles devem ser atributos do mesmo.]{.fontsize70}
2. [O carro controla o tempo de vida do motor e das portas e, portanto, é ele que cria esses objetos.]{.fontsize70}
3. [A classe não deve ter um método `get` que retorne a referência do objeto (quebra o encapsulamento).]{.fontsize70}
4. [Como ninguém tem referência para os objetos porta e motor, esses objetos só podem ser destruídos junto com o carro. Portanto, o tempo de vida está completamente controlado.]{.fontsize70}
:::



## Resumindo...
![](figuras/resumo_composicao.png){fig-alt="Resumo_composicao" fig-align="center" width=90%}


## Relacionamento: Grupo de Estudo x Alunos
::::{.columns style='display: flex !important; align-items: top;'}
::: {.column width="30%"}
![](figuras/grupo_estudantes.png){fig-alt="Grupo_estudantes" fig-align="center" width=70%}
:::
::: {.column width="60%" .fontsize90}
[Qual é o relacionamento entre um grupo de estudo e os alunos?]{style="color:darkblue;"}

- Um **grupo de estudo** [tem]{.underline} vários **alunos**. Desse modo, um aluno é parte de um grupo de estudo.

[Então isso é uma composição, certo?]{style="color:darkblue;" .fragment}
:::
::::

. . .

::::{.columns style='display: flex !important; align-items: center;'}
::: {.column width="60%" .fontsize90}
Quando um grupo de estudos acaba, os alunos deixam de existir?
:::
::: {.column width="40%"}
![](figuras/briga_grupo.png){fig-alt="Briga_grupo" fig-align="center" width=60%}
:::
::::


## Agregação
::::{.columns style='display: flex !important; align-items: top;'}
::: {.column width="30%"}
![](figuras/eu_existo.png){fig-alt="Eu_existo" fig-align="center" width=90%}
:::
::: {.column width="70%" .fontsize90}
[Essa também é uma relação **todo/parte**, porém, nesse caso dizemos que a parte **não é exclusiva** do todo.]{style="color:darkblue;"}

- Ou seja, **não** é o grupo de estudo **que controla** o **tempo de vida** dos alunos.
- Dizendo de outro modo, não é o todo que controla o tempo de vida das partes.
:::
::::

. . .

:::{.fontsize90}
[Repare:]{style="color:darkblue;"}
 
- Os alunos continuam existindo ainda que o grupo de estudo termine. Ufa...ainda bem!
:::

[Esse tipo de relacionamento é denominado [agregação]{.alert}.]{.fragment .fontsize90}


## Agregação -  Exemplo de Código
```{.java code-line-numbers="false"}
public class GrupoEstudo{
  private ArrayList<Aluno> alunos; //<1>
  
  public GrupoEstudo(){
    alunos = new ArrayList<Aluno>();
  }

  public void cadastrarAluno(Aluno aluno){ //<2>
    alunos.add(aluno);
  }
  // Demais métodos omitidos
}
```
1. [Como o grupo de estudo tem alunos, os alunos devem ser atributo do grupo de estudo.]{.fontsize70}
2. [Na agregação o todo não controla do tempo de vida das partes. Portanto, uma maneira de tratar isso é o grupo de estudo não criar alunos (e sim recebê-los de outro lugar).]{.fontsize70}


## Resumindo...
![](figuras/resumo_agregacao.png){fig-alt="Resumo_composicao" fig-align="center" width=80%}



## Relacionamento: Carro x Pessoa
::::{.columns style='display: flex !important; align-items: top;'}
::: {.column width="30%"}
![](figuras/locadora_carros.png){fig-alt="Locadora_carros" fig-align="center" width=85%}
:::
::: {.column width="60%" .fontsize90}
[Suponha que uma locadora de veículos resolva criar um sistema para controlar suas atividades.]{style="color:darkblue;"}

- Para esse sistema foram criadas as classes **Carro** e **Pessoa**.
:::
::::

:::{.fragment}
[Qual é o relacionamento entre essas classes?]{style="color:darkblue;"}

![](figuras/carro_pessoa.png){fig-alt="Carro_pessoa" fig-align="center" width=40%}
:::


## Associação
::::{.columns style='display: flex !important; align-items: top;'}
::: {.column width="30%"}
![](figuras/dirigindo_carro.png){fig-alt="Dirigindo_carro" fig-align="center" width=85%}
:::
::: {.column width="60%" .fontsize90}
[A pessoa utiliza o carro e o carro transporta a pessoa.]{style="color:darkblue;"}

- **Não faz sentido** dizer que pessoa **é parte** do carro ou que carro **é formado** por pessoas, concorda?
- Ou seja, **não é** um relacionamento **todo/parte**.
:::
::::

:::{.fragment .fontsize90}
Em outras palavras, temos duas classes distintas onde uma faz uso da outra.
:::

:::{.fragment .fontsize90}
Esse tipo de relacionamento é denominado [associação]{.alert}.
:::


## Associação - Exemplo de Código
::::{.columns style='display: flex !important; align-items: top;'}
::: {.column width="60%"}
```{.java code-line-numbers="false"}
public class Pessoa{
  private CarteiraMotorista cnh;
  //Demais atributos omitidos
  
  public Pessoa(){
    //Código omitido
  }

  public void obterCarteira(CarteiraMotorista cnh){ //<2>
    this.cnh = cnh;
  }
  
  public void viajar(Carro carro, int distancia){
    carro.acelerar();
    carro.frear();
    //Restante do código omitido
  }
}
```
:::
::: {.column width="50%" .fontsize70}
- Carteira de motorista não é parte de uma pessoa e nem o contrário. Portanto, temos uma associação.
  - Mas existe um relacionamento de propriedade, ou seja, um motorista possui uma CNH.
- Do mesmo modo, carro não é parte de pessoa e nem o contrário. Então, é uma associação também.
  - Mas existe um relacionamento, ou seja, uma pessoa viaja em um carro.
- Repare que temos duas formas de implementação aqui. Uma com atributo e outra não.
  - O que importa de fato é que, na associação, um objeto chama métodos de outros.
:::
::::


## Resumindo...
![](figuras/resumo_composicao_agregacao_associacao.png){fig-alt="Resumo_composicao_agregacao_associacao" fig-align="center" width=80%}


## A Relatividade
::::{.columns style='display: flex !important; align-items: top;'}
::: {.column width="50%"}
![](figuras/relatividade.png){fig-alt="Relatividade" fig-align="center" width=85%}
:::
::: {.column width="50%" .fontsize90 style='display: flex;  align-items: center; text-align: center;'}
A **classificação** do **relacionamento** entre objetos **é relativa**.
:::
::::


::::{.columns style='display: flex !important; align-items: top;'}
::: {.column width="70%" .fontsize90}
Ou seja, **para definirmos** se é uma composição, agregação ou associação temos que **analisar o contexto**.
:::
::: {.column width="30%" }
![](figuras/professor3_metade.png){fig-alt="Professor3_metade" fig-align="center" width=60%}
:::
::::

## Exemplo da Relatividade
[Anteriormente usamos como exemplo de composição a relação entre carro e motor.]{style="color:darkblue;" .fontsize80}

::::{.columns style='display: flex !important; align-items: top;'}
::: {.column width="30%" style='display: flex;  align-items: center;'}
![](figuras/carro_formula1.png){fig-alt="Carro_f1" fig-align="center" width=100%}
:::
::: {.column width="70%" .fontsize80}
Mas o que podemos dizer ao ler a notícia a seguir?

![](figuras/noticia_f1.png){fig-alt="Noticia_f1" fig-align="center" width=90%}
:::
::::

:::{.fragment .fontsize80}
Neste caso, percebemos que o motor existe independentemente do carro, ou seja, não é o carro que controla o tempo de vida do motor.

- Portanto, agora temos uma **agregação**!
:::


##
![](figuras/perguntas.png){fig-alt="Perguntas" fig-align="center" width=35%}