---
title: Conceitos Básicos de Orientação a Objetos:<br>Objetos, Classes e Métodos<br><br>
title-slide-attributes:
    data-background-size: contain
    data-background-position-x: center
    data-background-position-y: center
---

## Conteúdo desta Aula  

::::{.columns style='display: flex !important; height: 70%; align-items: center;'}

::: {.column width="30%"}
![](figuras/professor1-1.png){fig-alt="Professor1-1" fig-align="center"}
:::

::: {.column width="70%"}
::: {.nonincremental}
::: {style="font-size: 120%;"}
- Introdução à OO
- Objetos 
- Classes
- Métodos
    - Parâmetros
    - Valores de Retorno
:::
:::
:::

::::

# Introdução à Orientação a Objetos {background-color="#fb8c0e"}

## Paradigmas de Linguagens de Programação

As [Linguagens de Programação]{.alert} (LPs) podem ser classificadas quanto ao [paradigma de programação]{.alert}.

. . .

:::: {.columns style='display: flex !important; align-items: top;'}

::: {.column width="15%"}
![](figuras/jovem.png){fig-alt="Pensando" fig-align="center" width=60%}
:::

::: {.column width="85%"}
**O que é um paradigma?**

- Um conjunto de teorias, padrões e métodos que juntos representam uma forma de organizar o conhecimento.
- Um [paradigma]{.alert} é um [padrão de resolução de problemas]{.alert}.
:::
::::

. . .

:::{.callout-important title="Observação" icon=false}
Algumas LPs são projetadas para suportar mais de um paradigma.
:::


## Paradigmas de Linguagens de Programação
**Quais paradigmas de LPs você conhece?**

. . .

![](figuras/paradigmasLPs.png){fig-alt="ParadigmasLPs" fig-align="center" width=70%}


## Paradigma Estruturado
- [Pensamento]{.alert} de programação mais voltado ao [pensamento de máquina]{.alert}. 
- Tem como [foco]{.alert} principal as [ações]{.alert}.
- Os programas em linguagem estruturada usam:
    - Variáveis.
    - Procedimentos e funções como mecanismos de estruturação.

. . .

::::{.columns style='display: flex !important; align-items: top;'}
::: {.column width=20%}
**Exemplo:**
:::

::: {.column width=80%}
```{.java code-line-numbers="false"}
//Exemplo de variáveis
int a,b;
string nome;
char sexo;
//Exemplo de função
int multiplicacao(int a, int b){
    int mult;
    mult = a * b;
    return mult;
}
```
:::
::::


## Paradigma Orientado a Objetos
- [Pensamento]{.alert} de programação mais voltado ao [pensamento humano]{.alert}.
- Conceitos envolvidos: classes, objetos, atributos, métodos, herança etc.
- Um [programa]{.alert} é uma coleção de [objetos que interagem entre si]{.alert}, passando mensagens que transformam o seu estado.
- Evolução da programação estruturada.

. . .

:::{.callout-important title="Observação" icon=false}
Alguns autores não consideram um paradigma propriamente dito, mas sim uma extensão do paradigma estruturado.
:::


## Paradigmas de Linguagens de Programação

![](figuras/comparacao_paradigmas.png){fig-alt="Comparacao_paradigmas" fig-align="center" width=80%}


## Um Pouco de História
- A Orientação a Objetos data do final da década de 60 e início da década de 70.
    - Simula 67 (60's).
    - Smalltalk (70's).
    - C++ (80's).

- Surgiu da necessidade de modelar sistemas mais complexos.


## Forma do Pensamento Humano
Como vocês descreveriam essa cena?

![](figuras/cena_sala_aula.png){fig-alt="Cena_sala_aula" fig-align="center" width=60%}

- Observem que nós compreendemos o mundo por meio dos objetos!


## Orientação a Objetos

![](figuras/poo.png){fig-alt="POO" fig-align="center" width=65%}


# Objetos e Classes {background-color="#fb8c0e"}

## Objetos
Ao escrever um [programa]{.alert} em uma [linguagem Orientada a Objetos]{.alert} (OO):

- você está criando um [modelo]{.alert} de alguma parte do mundo,
- sendo os [objetos]{.alert} as [partes desse modelo]{.alert}.

. . .

Considere que precisamos criar um **programa** para simular o **trânsito** em uma cidade.\
Quais são os **objetos** que aparecem no **domínio desse problema**?

. . . 

::::{.columns style='display: flex !important; height: 70%; align-items: center;'}

::: {.column width="35%"}
![](figuras/transito.png){fig-alt="Transito" fig-align="center" width=90%}
:::

::: {.column width="65%"}
::: {.nonincremental}
::: {style="font-size: 110%;"}
- Carros
- Semáforos
- Pedestres
- etc.
:::
:::
:::

::::


## Objetos
Portanto, [objetos]{.alert}:

-  São [elementos computacionais]{.alert} que representam alguma [entidade]{.alert} (abstrata ou concreta) do domínio de interesse do problema sob análise.
- Correspondem a uma [abstração]{.alert} para algo do mundo real.

. . .

Observe que os **objetos** dependem do **problema** que desejamos resolver. Exemplos:

- No caso de um [software para uma pizzaria]{.underline} os objetos seriam: pizzas, bebidas, pedidos, atendentes etc.
- No caso de um [software de gerenciamento acadêmico]{.underline} os objetos seriam: alunos, professores, turmas, disciplinas etc.

## Classes

::::{.columns style='display: flex !important; align-items: top;'}

::: {.column width="30%"}
![](figuras/colecao_lapis.png){fig-alt="Projeto" fig-align="center" width=60%}
:::

::: {.column width="70%"}
Uma [classe]{.alert} descreve, de maneira abstrata, todos os [objetos de um tipo particular]{.alert}.
:::

::::

. . .

::::{.columns style='display: flex !important; align-items: top;'}

::: {.column width="70%"}
Então qual a diferença entre **classe** e **objeto**?

- A classe descreve o tipo de objeto.
- Os objetos são criados a partir das classes.
- Ou seja, os [objetos]{.alert} representam [instanciações individuais da classe]{.alert}.
- E, por isso, um [objeto]{.alert} também é chamado de [instância]{.alert} de uma classe.
:::

::: {.column width="30%"}
![](figuras/jovem.png){fig-alt="Pensando" fig-align="center" width=40%}
:::

::::

## Classe *versus* Objeto: Analogia

![](figuras/projeto_com_casa.png){fig-alt="ProjetoCasa"  fig-align="center" width=45%}

[Uma classe é como um “projeto” a partir do qual objetos individuais são criados.]{.fontsize80}

. . .

:::{.callout-important title="Observação" icon=false}
**Muitos objetos** semelhantes podem ser **criados** a partir de uma **única classe**.
:::


## O que há em um objeto?

::::{.columns style='display: flex !important; align-items: center;'}

::: {.column width="15%"}
![](figuras/jovem.png){fig-alt="Pensando" fig-align="center" width=60%}
:::

::: {.column width="85%"}

- [Atributos]{.alert} (campos): são as [características]{.alert} que o definem.
    - [Análogos às variáveis em programação estruturada.]{.fontsize80}

- [Métodos]{.alert}: determinam o [comportamento]{.alert} do objeto.
    - [Análogos às funções ou procedimentos na programação estruturada.]{.fontsize80}

:::

::::

. . .

::::{.columns style='display: flex !important; align-items: top;'}

::: {.column width="20%"}
**Exemplo:**
:::

::: {.column width="80%"}
![](figuras/exemplo_atributos_metodos.png){fig-alt="Exemplo" fig-align="left" width=75%}
:::

::::

## Objetos
Objetos têm **estado**.

- O [conjunto de valores]{.alert} de todos os [atributos]{.alert} que definem o objeto é denominado [estado do objeto]{.alert}.

. . .

::::{.columns style='display: flex !important; align-items: center;'}

::: {.column width="50%"}
**Exemplo:**

::: {style="font-size: 80%;"}
Considere que temos um objeto da classe **Quadrado** com os seguintes atributos:

::: {.nonincremental}
- tamanho
- posicaoX
- posicaoY
- cor
- estaVisivel
:::
:::
:::

::: {.column width="50%"}
![](figuras/estado_objeto.png){fig-alt="ExemploEstadoObjeto" fig-align="center" width=90%}
:::

::::




## Classe *versus* Objeto

Um [objeto]{.alert} constitui uma [entidade]{.alert} concreta com [tempo e espaço de existência]{.alert}, enquanto a [classe]{.alert} é somente uma [abstração]{.alert}, ou seja:

- As **classes** existem no **código-fonte** do programa.

- Já os **objetos** existem apenas durante a **execução do programa**.

. . .

:::{.callout-note title="Conceito" icon=false}
O **código-fonte** de uma classe determina a **estrutura e o comportamento** (atributos e métodos) de cada um dos **objetos** dessa classe.
:::


## Classe *versus* Objeto

::::{.columns style='display: flex !important; align-items: top;'}

::: {.column width="40%"}
**Exemplo:**

::: {style="font-size: 80%;"}
Aqui temos representada a classe **Quadrado** e dois objetos criados (instanciados) a partir dessa classe.

Observe que o **estado** dos objetos é diferente!

:::{.callout-important title="Atenção" icon=false}
Neste exemplo apenas os **atributos** estão representados na classe. Mas lembre-se que os **métodos** também são definidos na classe.
:::
:::
:::

::: {.column width="60%"}
![](figuras/classe_objeto.png){fig-alt="ExemploClasseObjeto" fig-align="center" width=80%}
:::

::::



# Métodos, Parâmetros e Valores de Retorno {background-color="#fb8c0e"}


## Métodos

::::{.columns style='display: flex !important; align-items: center;'}

::: {.column width="75%"}
Em OO, durante a execução de um programa, **objetos interagem** entre si por meio de **envio de mensagens**.

- Uma [mensagem]{.alert} corresponde a uma [chamada de um método]{.alert} de um objeto.
:::

::: {.column width="25%"}
![](figuras/envio_mensagem.png){fig-alt="Mensagens" fig-align="left" width=100%}
:::

::::

. . .

Portanto, podemos nos comunicar com objetos chamando (invocando) seus métodos.

- [Em geral, objetos fazem alguma tarefa quando invocamos algum de seus métodos.]{.fontsize80}

. . .

Por exemplo, em um programa pode-se chamar o **método** *depósito* de um **objeto** *conta bancária* para aumentar o saldo dessa conta.

## Parâmetros
::: {.nonincremental}
Todo [método]{.alert} definido no código-fonte de um programa [tem um cabeçalho]{.alert}, também denominado [assinatura]{.alert}. 

- [A assinatura fornece as informações necessárias para invocar um método. **Exemplo:**]{.fontsize80}

::: {.halfincfontsize}
```{.java code-line-numbers="false"}
float getSaldo()
```
:::
:::
. . .

Os métodos podem ter [parâmetros]{.alert} para [fornecer informações adicionais]{.alert} à tarefa que se deseja realizar.

::::{.columns style='display: flex !important; align-items: center;'}

::: {.column width="20%"}
**Exemplo:**
:::

::: {.column width="80%"}
::: {.halfincfontsize}
```{.java code-line-numbers="false"}
void depositar(float valor)
```
:::
:::
::::

::: {.nonincremental}
- [A parte entre parênteses *(float valor)* contém as informações sobre o(s) parâmetro(s) requerido(s).]{.fontsize70}
- [Cada parâmetro tem um **tipo** e um **nome**. A partir da assinatura do exemplo podemos observar que o método *depositar* tem um parâmetro do tipo *float* chamado *valor*.]{.fontsize70}
:::


## Objetos como Parâmetros

Mostramos anteriormente que o método **depositar** tem um parâmetro do tipo *float*. 

- [Esse é somente um dos tipos de dados que a linguagem de programação **Java** suporta.]{.fontsize80}

. . .

É importante observar que além de valores de tipos definidos no Java, [objetos]{.alert} também podem ser [passados como parâmetros]{.alert} aos métodos. 

. . .

::::{.columns style='display: flex !important; align-items: center;'}

::: {.column width="20%"}
**Exemplo:**
:::

::: {.column width="80%"}
::: {.halfincfontsize}
```{.java code-line-numbers="false"}
void cadastrarConta(Conta contaBancaria)
```
:::
:::
::::

::: {.nonincremental}
- [A parte entre parênteses *(Conta contaBancaria)* especifica que o método espera um objeto *Conta* como parâmetro.]{.fontsize70}
- [Observe que, nesse caso, o [nome da classe]{.alert} do objeto esperado é especificado como o [tipo do parâmetro]{.alert} na assinatura do método.]{.fontsize70}
:::



## Valores de Retorno

Os métodos podem [retornar um valor]{.alert} de resultado. 

- A assinatura de cada método informa se um resultado é ou não retornado e, em caso positivo, o seu tipo.

. . .

::::{.columns style='display: flex !important; align-items: center;'}

::: {.column width="20%"}
**Exemplo 1:**
:::

::: {.column width="80%"}
::: {.halfincfontsize}
```{.java code-line-numbers="false"}
void depositar(float valor)
```
:::
:::
::::

::: {.nonincremental}
- [Nesse caso a palavra *void* antes do nome do método indica que ele não retorna um resultado.]{.fontsize70}
:::

. . .

::::{.columns style='display: flex !important; align-items: center;'}

::: {.column width="20%"}
**Exemplo 2:**
:::

::: {.column width="80%"}
::: {.halfincfontsize}
```{.java code-line-numbers="false"}
float getSaldo()
```
:::
:::
::::

::: {.nonincremental}
- [Nesse caso a palavra *float* antes do nome do método especifica o seu tipo de retorno.]{.fontsize70}
- [Ou seja, ao chamar esse método ele retornará um resultado do tipo *float*.]{.fontsize70}
:::


##

![](figuras/perguntas.png){fig-alt="Perguntas" fig-align="center" width=35%}